using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;
using System.IO.Packaging;
using System.Xml;

using TacticPlanner.models;
using TacticPlanner.types;

namespace TacticPlanner.models {
	class Tactic {
		private Maps maps;
		private Tanks tanks;
		private Icons icons;

		private Map map;

		private StaticTactic staticTactic;
		private DynamicTactic dynamicTactic;

		public Tactic(string basePath) {
			maps = new Maps(basePath + "\\maps\\maps.xml");
			tanks = new Tanks(basePath + "\\stamps\\tanks\\tanks.xml");
			icons = new Icons(basePath + "\\stamps\\icons\\icons.xml");
		}

		public StaticTactic getStaticTactic() {
			return staticTactic;
		}

		public DynamicTactic getDynamicTactic() {
			return dynamicTactic;
		}

		public Map[] getMaps() {
			return maps.getSortedMaps();
		}

		public Map getMap() {
			return map;
		}

		public void setMapPack(MapPack pack) {
			maps.setMapPack(pack);
			if (isLoaded()) {
				map.mapPack = pack;
			}
		}

		public Tanks getTanks() {
			return tanks;
		}

		public Icons getIcons() {
			return icons;
		}

		public List<StaticIcon> getStaticIcons() {
			return icons.getStaticIconList();
		}

		public List<DynamicIcon> getDynamicIcons() {
			return icons.getDynamicIconList();
		}

		public bool isLoaded() {
			return staticTactic != null;
		}

		public void newTactic(string map) {
			staticTactic = new StaticTactic(maps, tanks, icons);
			dynamicTactic = new DynamicTactic(maps, tanks, icons);
			staticTactic.setMap(map);
			dynamicTactic.setMap(map);

			this.map = maps.getMap(map);
		}

		public bool save(string path) {
			if (File.Exists(path)) {
				try {
					File.Delete(path);
				} catch (Exception) {
					return false;
				}
			}

			FileStream fs = new FileStream(path, FileMode.Create);
			serialize(fs);
			fs.Close();

			return true;
		}

		public void serialize(Stream stream) {
			Package zip = ZipPackage.Open(stream, FileMode.Create, FileAccess.ReadWrite);

			UTF8Encoding encoding = new UTF8Encoding();
			MemoryStream xmlString = new MemoryStream();
			XmlTextWriter xmlWriter = new XmlTextWriter(xmlString, Encoding.UTF8);
			xmlWriter.WriteStartDocument();
			xmlWriter.WriteComment("Tactic planner save file. DO NOT EDIT THIS FILE MANUALLY!");
			xmlWriter.WriteStartElement("tactic");
			xmlWriter.WriteAttributeString("version", "1.1.0");
			xmlWriter.WriteAttributeString("game", "World of Tanks");
			xmlWriter.WriteEndElement();
			xmlWriter.WriteEndDocument();
			xmlWriter.Close();

			PackagePart part = zip.CreatePart(new Uri("/tactic.xml", UriKind.Relative), System.Net.Mime.MediaTypeNames.Text.Xml, CompressionOption.Fast);
			part.GetStream().Write(xmlString.ToArray(), 0, xmlString.ToArray().Length);

			staticTactic.save(zip);
			dynamicTactic.save(zip);
			zip.Close();
		}

		public bool load(string path) {
			if (!File.Exists(path)) {
				return false;
			}

			FileStream fs = new FileStream(path, FileMode.Open);
			unserialize(fs);
			fs.Close();

			return true;
		}

		public void unserialize(Stream stream) {
			staticTactic = new StaticTactic(maps, tanks, icons);
			dynamicTactic = new DynamicTactic(maps, tanks, icons);

			Package zip = ZipPackage.Open(stream, FileMode.Open, FileAccess.Read);
			staticTactic.load(zip);
			dynamicTactic.load(zip);
			zip.Close();

			this.map = staticTactic.getMap();
		}
	}
}
