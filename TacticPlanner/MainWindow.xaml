<Window x:Class="TacticPlanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:avalonDock="http://avalondock.codeplex.com"
		xmlns:xtk="http://schemas.xceed.com/wpf/xaml/toolkit"
		xmlns:local="clr-namespace:TacticPlanner"
        Title="Tactic planner" Height="610" Width="815" MinHeight="100" MinWidth="150" WindowStartupLocation="CenterScreen" Loaded="Window_Loaded" Icon="/TacticPlanner;component/logo_small.ico">
	<Window.Resources>
		<Style TargetType="{x:Type Button}">
			<Setter Property="Background" Value="#333" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Height" Value="40" />
			<Setter Property="Margin" Value="5,5,5,0" />
			<Setter Property="BorderBrush" Value="White" />
			<Style.Triggers>
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Foreground" Value="Black" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type Label}">
			<Setter Property="Foreground" Value="White" />
		</Style>
		<Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
			<Setter Property="Background" Value="#333" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Height" Value="40" />
			<Setter Property="Margin" Value="5,5,5,0" />
			<Setter Property="BorderBrush" Value="White" />
			<Style.Triggers>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Foreground" Value="Black" />
				</Trigger>
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Foreground" Value="Black" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type ToggleButton}}">
			<Setter Property="Background" Value="Gray" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="White" />
			<Setter Property="Margin" Value="2,2,2,2" />
			<Style.Triggers>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Foreground" Value="Black" />
				</Trigger>
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Foreground" Value="Black" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="{x:Type ComboBox}">
			<Setter Property="Background" Value="LightGray" />
			<Setter Property="Foreground" Value="Black" />
			<Setter Property="BorderBrush" Value="White" />
			<Setter Property="Margin" Value="5,5,5,0" />
		</Style>
		<Style TargetType="{x:Type ListBox}">
			<Setter Property="Background" Value="Gray" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="White" />
			<Setter Property="Margin" Value="5,5,5,0" />
		</Style>
		<Style TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="LightGray" />
			<Setter Property="Foreground" Value="Black" />
			<Setter Property="BorderBrush" Value="White" />
			<Setter Property="Margin" Value="5,5,5,0" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>
		<Style TargetType="{x:Type PasswordBox}">
			<Setter Property="Background" Value="LightGray" />
			<Setter Property="Foreground" Value="Black" />
			<Setter Property="BorderBrush" Value="White" />
			<Setter Property="Margin" Value="5,5,5,5" />
			<Setter Property="VerticalAlignment" Value="Center" />
		</Style>
		<Style TargetType="{x:Type xtk:IntegerUpDown}">
			<Setter Property="Background" Value="Gray" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Margin" Value="0,5,5,0" />
		</Style>
		<Style TargetType="{x:Type xtk:ColorPicker}">
			<Setter Property="Background" Value="#333" />
			<Setter Property="BorderBrush" Value="White" />
		</Style>
		<Style TargetType="{x:Type avalonDock:DockingManager}">
			<Setter Property="Background" Value="Black" />
		</Style>
		<Style TargetType="{x:Type Grid}">
			<Setter Property="Background" Value="#333" />
		</Style>
		<Style x:Key="whiteMenu" TargetType="{x:Type MenuItem}">
			<Setter Property="Foreground" Value="White" />
		</Style>
	</Window.Resources>
	<Window.CommandBindings>
		<CommandBinding Command="Open" Executed="menuLoad_Click" />
		<CommandBinding Command="Save" Executed="menuSave_Click" />
		<CommandBinding Command="Close" Executed="exitMenu_Click" />
		<CommandBinding Command="local:MenuCommands.Export" Executed="menuExport_Click" />
		<CommandBinding Command="local:MenuCommands.ToggleGrid" Executed="menuShowGrid_Toggle" />
		<CommandBinding Command="local:MenuCommands.ToggleBriefing" Executed="menuShowBriefing_Toggle" />
		<CommandBinding Command="Copy" Executed="menuCopyDynamic_Click" />
		<CommandBinding Command="Paste" Executed="menuPasteDynamic_Click" />
	</Window.CommandBindings>
	<Window.InputBindings>
		<KeyBinding Key="L" Modifiers="Control" Command="Open" />
		<KeyBinding Key="S" Modifiers="Control" Command="Save" />
		<KeyBinding Key="E" Modifiers="Control" Command="Close" />
		<KeyBinding Key="R" Modifiers="Control" Command="local:MenuCommands.Export" />
		<KeyBinding Key="G" Modifiers="Control" Command="local:MenuCommands.ToggleGrid" />
		<KeyBinding Key="B" Modifiers="Control" Command="local:MenuCommands.ToggleBriefing" />
		<KeyBinding Key="C" Modifiers="Control" Command="Copy" />
		<KeyBinding Key="V" Modifiers="Control" Command="Paste" />
	</Window.InputBindings>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*" />
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="24" />
			<RowDefinition Height="*" />
		</Grid.RowDefinitions>
		<Menu Background="Black" FontSize="14" Grid.Column="0" Grid.Row="0">
			<MenuItem Header="_File" Style="{StaticResource whiteMenu}">
				<MenuItem Header="_New" Name="newMenu">
					
				</MenuItem>
				<MenuItem Header="_Save" Click="menuSave_Click" InputGestureText="Ctrl+S" />
				<MenuItem Header="_Load" Click="menuLoad_Click" InputGestureText="Ctrl+L" />
				<Separator />
				<MenuItem Header="E_xport" Click="menuExport_Click" InputGestureText="Ctrl+R" />
				<Separator />
				<MenuItem Header="_Exit" Click="exitMenu_Click" InputGestureText="Ctrl+E" />
			</MenuItem>
			<MenuItem Header="_Edit" Style="{StaticResource whiteMenu}">
				<MenuItem Header="_Copy tank" Name="menuCopyDynamic" Click="menuCopyDynamic_Click" InputGestureText="Ctrl+C" IsEnabled="False" />
				<MenuItem Header="_Paste tank" Name="menuPasteDynamic" Click="menuPasteDynamic_Click" InputGestureText="Ctrl+V" IsEnabled="False" />
			</MenuItem>
			<MenuItem Header="_View" Style="{StaticResource whiteMenu}">
				<MenuItem Header="_Map pack">
					<MenuItem Header="_Original" IsCheckable="True" IsChecked="True" Name="menuMappackOriginal" Checked="menuMappackOriginal_Checked" />
					<MenuItem Header="_HD" IsCheckable="True" Name="menuMappackHD" Checked="menuMappackHD_Checked" />
				</MenuItem>
				<MenuItem Header="_Dynamic settings">
					<MenuItem Header="Show _player name" IsCheckable="True" IsChecked="True" Name="menuShowPlayerName" Checked="menuShowPlayerName_Changed" Unchecked="menuShowPlayerName_Changed" />
					<MenuItem Header="Show _tank type" IsCheckable="True" Name="menuShowTankType" Checked="menuShowTankType_Changed" Unchecked="menuShowTankType_Changed" />
				</MenuItem>
				<Separator />
				<MenuItem Header="_Show grid" IsCheckable="True" Name="menuShowGrid" Checked="menuShowGrid_Checked" Unchecked="menuShowGrid_Unchecked" InputGestureText="Ctrl+G" />
				<MenuItem Header="_Briefing options" IsCheckable="True" Name="menuShowBriefing" Checked="menuShowBriefing_Checked" Unchecked="menuShowBriefing_Unchecked" InputGestureText="Ctrl+B" />
			</MenuItem>
			<MenuItem Header="_Help" Style="{StaticResource whiteMenu}">
				<MenuItem Header="_About" Click="aboutMenu_Click" />
			</MenuItem>
		</Menu>
		<avalonDock:DockingManager x:Name="dockingManager" Grid.Column="0" Grid.Row="1">
			<avalonDock:LayoutRoot>
				<avalonDock:LayoutPanel Orientation="Horizontal">
					<avalonDock:LayoutDocumentPane>
						<avalonDock:LayoutDocument CanClose="False" CanFloat="False" Title="Map">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<Image Name="mapBox" Stretch="Uniform" Grid.Column="0" Grid.Row="0" Panel.ZIndex="10" />
								<Image Name="gridBox" Stretch="Uniform" Grid.Column="0" Grid.Row="0" Panel.ZIndex="100" />
								<Image Name="drawBox" Stretch="Uniform" Grid.Column="0" Grid.Row="0" MouseDown="drawBox_MouseDown" MouseMove="drawBox_MouseMove" MouseUp="drawBox_MouseUp" MouseLeave="drawBox_MouseLeave" MouseEnter="drawBox_MouseEnter" Panel.ZIndex="200" />
							</Grid>
						</avalonDock:LayoutDocument>
					</avalonDock:LayoutDocumentPane>
					<avalonDock:LayoutAnchorablePane DockMinWidth="200" DockWidth="200" DockMinHeight="400">
						<avalonDock:LayoutAnchorable CanClose="False" Title="Static panel" CanHide="False" IsActiveChanged="LayoutAnchorable_IsActiveChanged">
							<Grid Name="staticPanelGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="90" />
									<ColumnDefinition Width="100" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<Label Grid.Column="0" Grid.Row="0">Color:</Label>
								<xtk:ColorPicker Grid.Column="1" Grid.Row="0" SelectedColor="Red" Margin="0,5,5,0" Name="drawColor" />
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" IsChecked="True" Click="cursorTool_Click">Cursor tool</RadioButton>
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" Name="freeTool" Click="freeTool_Click">Free tool</RadioButton>
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Name="lineTool" Click="lineTool_Click">Line tool: solid</RadioButton>
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="4" Name="arrowTool" Click="arrowTool_Click">Arrow tool: solid</RadioButton>
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="5" Name="stampTool" Click="stampTool_Click">Stamp tool</RadioButton>
								<RadioButton Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="6" Name="eraseTool" Click="eraseTool_Click">Erase tool</RadioButton>
								<Label Grid.Column="0" Grid.Row="7">Thickness:</Label>
								<xtk:IntegerUpDown Value="5" Minimum="1" Maximum="30" Grid.Column="1" Grid.Row="7" Name="drawThickness" />
								<Label Grid.Column="0" Grid.Row="8" VerticalAlignment="Center">Stamp image:</Label>
								<Border Grid.Column="1" Grid.Row="8" BorderBrush="White" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,5,0,0">
									<Image Width="50" Height="50" Stretch="Uniform" Name="stampImage" MouseUp="stampImage_MouseUp" />
								</Border>
								<Label Grid.Column="0" Grid.Row="9">Stamp size:</Label>
								<xtk:IntegerUpDown Value="100" Minimum="4" Maximum="500" Grid.Column="1" Grid.Row="9" Name="stampSize" />
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="10" Click="resetStatic_Click">Reset current</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="11" Click="cloneStatic_Click">Clone previous</Button>
							</Grid>
						</avalonDock:LayoutAnchorable>
						<avalonDock:LayoutAnchorable CanClose="False" Title="Dynamic panel" CanHide="False" IsActiveChanged="LayoutAnchorable_IsActiveChanged">
							<Grid Name="dynamicPanelGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="90" />
									<ColumnDefinition Width="100" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<ComboBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Name="dynamicStaticList" DisplayMemberPath="name" SelectedValuePath="id" SelectionChanged="dynamicStaticList_SelectionChanged" />
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Name="addStatic" Click="addStatic_Click">Add static element</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Click="addTank_Click">Add tank</Button>
								<ListBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="4" MinHeight="95" DisplayMemberPath="listName" Name="dynamicTankList" SelectionChanged="dynamicTankList_SelectionChanged" />
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="5" Name="editTank" Click="editTank_Click">Edit tank</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="6" Name="removeTank" Click="removeTank_Click">Remove tank</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="7" Name="tankAliveStatus" Click="tankAliveStatus_Click">Alive</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="8" Name="delTankCurrentPosition" Click="delTankCurrentPosition_Click">Del current position</Button>
								<ComboBox Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="9" Name="dynamicEvents" DisplayMemberPath="name" SelectedValuePath="id" SelectionChanged="dynamicEvents_SelectionChanged" />
								<Label Grid.Column="0" Grid.Row="10">Icons size:</Label>
								<xtk:IntegerUpDown Value="50" Minimum="30" Maximum="100" Grid.Column="1" Grid.Row="10" Name="iconSize" ValueChanged="iconSize_ValueChanged" />
								<Label Grid.Column="0" Grid.Row="11">Text color:</Label>
								<xtk:ColorPicker Grid.Column="1" Grid.Row="11" SelectedColor="White" Margin="0,5,5,5" Name="dynamicTextColor" SelectedColorChanged="dynamicTextColor_SelectedColorChanged" />
							</Grid>
						</avalonDock:LayoutAnchorable>
						<avalonDock:LayoutAnchorable CanClose="False" Title="Play panel" CanHide="False" IsActiveChanged="LayoutAnchorable_IsActiveChanged">
							<Grid Name="playPanelGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="90" />
									<ColumnDefinition Width="100" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<RadioButton IsChecked="True" Grid.Column="0" Grid.Row="0" Margin="10" Name="playStatic" Checked="playMode_Changed">Play static</RadioButton>
								<RadioButton Grid.Column="1" Grid.Row="0" Margin="10" Checked="playMode_Changed">Play dynamic</RadioButton>
								<Label Grid.Column="0" Grid.Row="1">Speed:</Label>
								<xtk:IntegerUpDown Value="10" Minimum="1" Maximum="30" Grid.Column="1" Grid.Row="1" Name="playSpeed" ValueChanged="playSpeed_ValueChanged" />
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="2" Name="playPlay" Click="playPlay_Click">Play</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Name="playPause" Click="playPause_Click">Pause</Button>
								<Button Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="4" Name="playStop" Click="playStop_Click">Stop</Button>
								<Label Grid.Column="0" Grid.Row="5">Icons size:</Label>
								<xtk:IntegerUpDown Value="50" Minimum="30" Maximum="100" Grid.Column="1" Grid.Row="5" Name="playIconSize" ValueChanged="playIconSize_ValueChanged" />
								<Label Grid.Column="0" Grid.Row="6">Text color:</Label>
								<xtk:ColorPicker Grid.Column="1" Grid.Row="6" SelectedColor="White" Margin="0,5,5,0" Name="playTextColor" SelectedColorChanged="playTextColor_SelectedColorChanged" />
							</Grid>
						</avalonDock:LayoutAnchorable>
					</avalonDock:LayoutAnchorablePane>
					<avalonDock:LayoutAnchorablePane DockWidth="200" DockMinWidth="200">
						<avalonDock:LayoutAnchorable CanClose="False" Title="Briefing" CanHide="True" x:Name="briefingPanel">
							<Grid Name="briefingPanelGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<Button Grid.Row="0" Grid.Column="0" Name="openServer" Click="openServer_Click">Open server</Button>
								<Button Grid.Row="0" Grid.Column="1" Name="connect" Click="connect_Click">Connect to</Button>
								<Button Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Name="disconnect" Click="disconnect_Click" Visibility="Hidden">Disconnect</Button>
								<Label Grid.Column="0" Grid.Row="1">Nick:</Label>
								<TextBox Grid.Column="1" Grid.Row="1" Name="nick" />
								<Label Grid.Column="0" Grid.Row="2">Host:</Label>
								<TextBox Grid.Column="1" Grid.Row="2" Name="host" />
								<Label Grid.Column="0" Grid.Row="3">Port:</Label>
								<TextBox Grid.Column="1" Grid.Row="3" Name="port">27788</TextBox>
								<Label Grid.Column="0" Grid.Row="4">Password:</Label>
								<PasswordBox Grid.Column="1" Grid.Row="4" Name="password" PasswordChanged="password_PasswordChanged" />
								<CheckBox Grid.Column="0" Grid.Row="5" Name="clientsCanPing" Checked="clientsCanPing_Checked" Unchecked="clientsCanPing_Unchecked" IsChecked="True">Clients can ping</CheckBox>
								<CheckBox Grid.Column="1" Grid.Row="5" Name="clientsCanDraw" Checked="clientsCanDraw_Checked" Unchecked="clientsCanDraw_Unchecked">Clients can draw</CheckBox>
								<ListBox Grid.Column="0" Grid.Row="6" Grid.ColumnSpan="2" Name="clientList" />
								<Button Grid.Column="0" Grid.Row="7" Grid.ColumnSpan="2" Name="kick"  Click="kick_Click" IsEnabled="False" Margin="5,5,5,5">Kick</Button>
							</Grid>
						</avalonDock:LayoutAnchorable>
					</avalonDock:LayoutAnchorablePane>
					<avalonDock:LayoutAnchorablePane DockWidth="65" DockMinWidth="65" DockMinHeight="200">
						<avalonDock:LayoutAnchorable CanClose="False" Title="Timer" CanHide="False">
							<Grid Name="timePanelGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="*" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<Label HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0">Time left</Label>
								<Label HorizontalAlignment="Center" Grid.Column="0" Grid.Row="1" Name="timeLabel">15:00</Label>
								<Slider HorizontalAlignment="Center" Grid.Column="0" Grid.Row="2" Value="900" Minimum="0" Maximum="900" Orientation="Vertical" SmallChange="30" TickFrequency="30" LargeChange="30" TickPlacement="TopLeft" IsSnapToTickEnabled="True" Name="timeBar" ValueChanged="timeBar_ValueChanged" />
								<CheckBox Grid.Column="0" Grid.Row="3" IsChecked="False" Name="noTimer" Checked="noTimer_Changed" Unchecked="noTimer_Changed">No timer</CheckBox>
							</Grid>
						</avalonDock:LayoutAnchorable>
					</avalonDock:LayoutAnchorablePane>
				</avalonDock:LayoutPanel>
			</avalonDock:LayoutRoot>
		</avalonDock:DockingManager>
	</Grid>
</Window>
